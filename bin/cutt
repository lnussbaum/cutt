#!/usr/bin/ruby

# FIXME: needs refactoring. Especially, needs a Calendar object.

require 'agcaldav'
require 'json'
require 'pp'

$config = JSON::load(IO::read(Dir.home + '/.cutt.json'))
$config = OpenStruct::new($config)
$config.calendars.each_pair do |k, v|
  c = OpenStruct::new(v)
  $config.calendars[k] = c
end

def connect_all_calendars
  $config.calendars.each_pair do |k, c|
    c.conn = AgCalDAV::Client.new(:uri => c.uri, :user => c.user, :password => c.password)
  end
end

def get_future_events(cal)
  cal.conn.find_events(:start => Time::now.to_s, :end => '4000-01-01') || []
end

# our own formatting for datetime strings
class DateTime
  def to_s_cutt
    s = to_s.split('+')[0]
    s.sub!('T', ' ') # replace T with space
    s.sub!(/:00$/, '') # remove trailing seconds if :00
    return s
  end
end

class Date
  def to_s_cutt
    to_s
  end
end

def list_events(calendars)
  connect_all_calendars
  events = []
  calendars.each_pair do |name, cal|
    get_future_events(cal).each do |ev|
      events << [name, ev ]
    end
  end
  events.sort! { |a, b| a[1].start <=> b[1].start }
  events.delete_if { |ev| ev[1].end < Time::now.to_datetime } # in the past
  calwidth = events.map { |ev| ev[0].length }.max
  timewidth = events.map { |ev| ev[1].start.to_s_cutt.length }.max
  events.each do |ev|
    s = "%-#{calwidth}s %-#{timewidth}s %s" % [ev[0], ev[1].start.to_s_cutt, ev[1].summary]
    if ev[1].location
      s += " @ #{ev[1].location}"
    else
      # zimbra-specific hack: try to find a "ligne audioconférence"
      if ev[1].attendees
        audio = ev[1].attendees.select { |a| a.to.to_s =~ /audioconference/ }
        if not audio.empty?
          s += ' @ ' + audio[0].ical_params['CN'][0]
        end
      end
    end
    puts s
  end
end

class TimeParser
  TOKENS = {
    "m" => (60),
    "h" => (60 * 60),
    "d" => (60 * 60 * 24)
  }

  attr_reader :time

  def initialize(input)
    @input = input
    @time = 0
    parse
  end

  def parse
    @input.scan(/(\d+)(\w)/).each do |amount, measure|
      @time += amount.to_i * TOKENS[measure]
    end
  end
end

def add_event
  defcal = $config.calendars.keys.first
  print "Calendars (#{$config.calendars.keys.join(',')}) [#{defcal}]: "
  cal = STDIN.gets.chomp
  if cal == ""
    cal = defcal
  end
  raise "calendar not found" if not $config.calendars.keys.include?(cal)
  system("ncal -M3b")
  print "Date and time: "
  t = Time::parse(STDIN.gets.chomp)
  puts "Date and time selected: #{t}"
  print "Duration (dhm supported): "
  dur = TimeParser::new(STDIN.gets.chomp).time
  endt = t + dur
  puts "End: : #{endt}"
  print "Name: "
  name = STDIN.gets.chomp
  c = $config.calendars[cal]
  c.conn = AgCalDAV::Client.new(:uri => c.uri, :user => c.user, :password => c.password)
  c.conn.create_event(:start => t.to_s, :end => endt.to_s, :title => name)
end

if ARGV[0] == 'add'
  add_event
else
  list_events($config.calendars)
end
